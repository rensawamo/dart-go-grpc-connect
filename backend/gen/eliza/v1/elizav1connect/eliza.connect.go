// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eliza/v1/eliza.proto

package elizav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/rensawamo/dart-go-grpc-connect/backend/gen/eliza/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ElizaServiceName is the fully-qualified name of the ElizaService service.
	ElizaServiceName = "eliza.v1.ElizaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ElizaServiceSayProcedure is the fully-qualified name of the ElizaService's Say RPC.
	ElizaServiceSayProcedure = "/eliza.v1.ElizaService/Say"
)

// ElizaServiceClient is a client for the eliza.v1.ElizaService service.
type ElizaServiceClient interface {
	Say(context.Context, *connect.Request[v1.SayRequest]) (*connect.Response[v1.SayResponse], error)
}

// NewElizaServiceClient constructs a client for the eliza.v1.ElizaService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewElizaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ElizaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	elizaServiceMethods := v1.File_eliza_v1_eliza_proto.Services().ByName("ElizaService").Methods()
	return &elizaServiceClient{
		say: connect.NewClient[v1.SayRequest, v1.SayResponse](
			httpClient,
			baseURL+ElizaServiceSayProcedure,
			connect.WithSchema(elizaServiceMethods.ByName("Say")),
			connect.WithClientOptions(opts...),
		),
	}
}

// elizaServiceClient implements ElizaServiceClient.
type elizaServiceClient struct {
	say *connect.Client[v1.SayRequest, v1.SayResponse]
}

// Say calls eliza.v1.ElizaService.Say.
func (c *elizaServiceClient) Say(ctx context.Context, req *connect.Request[v1.SayRequest]) (*connect.Response[v1.SayResponse], error) {
	return c.say.CallUnary(ctx, req)
}

// ElizaServiceHandler is an implementation of the eliza.v1.ElizaService service.
type ElizaServiceHandler interface {
	Say(context.Context, *connect.Request[v1.SayRequest]) (*connect.Response[v1.SayResponse], error)
}

// NewElizaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewElizaServiceHandler(svc ElizaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	elizaServiceMethods := v1.File_eliza_v1_eliza_proto.Services().ByName("ElizaService").Methods()
	elizaServiceSayHandler := connect.NewUnaryHandler(
		ElizaServiceSayProcedure,
		svc.Say,
		connect.WithSchema(elizaServiceMethods.ByName("Say")),
		connect.WithHandlerOptions(opts...),
	)
	return "/eliza.v1.ElizaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ElizaServiceSayProcedure:
			elizaServiceSayHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedElizaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedElizaServiceHandler struct{}

func (UnimplementedElizaServiceHandler) Say(context.Context, *connect.Request[v1.SayRequest]) (*connect.Response[v1.SayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("eliza.v1.ElizaService.Say is not implemented"))
}
